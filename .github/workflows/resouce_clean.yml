name: Automatic Pre-Prod Resource Cleanup

on:
  # schedule:
  #   - cron: '*/2 * * * *'
  workflow_dispatch:
  pull_request:
    types: [labeled, unlabeled, synchronize, opened, edited, ready_for_review, reopened]

env:
  AWS_RESOURCE_DELETABLE

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:

      - name: Get PRs with test-label
        run: |
          label_name="test-label"
          PRs=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/skikkh/wai-san/pulls?state=open&labels=$label_name")
          echo "$PRs" | jq -r '.[] | select(.labels[].name == $label_name) | .number' --arg label_name "$label_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Created At for Each PR
        run: |
          label_name="test-label"
          PRs=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/skikkh/wai-san/pulls?state=open&labels=$label_name")
          PR_numbers=$(echo "$PRs" | jq -r '.[] | select(.labels[].name == $label_name) | .number' --arg label_name "$label_name")

          echo PR_numbers: $PR_numbers

          for PR_number in $PR_numbers; do
            created_at=$(gh api -H "Accept: application/vnd.github+json" "/repos/skikkh/wai-san/pulls/$PR_number" | jq -r '.created_at')
            echo "PR #$PR_number was created at $created_at"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if label is old enough for deletion
        run: |
          label_name="test-label"  # ここにラベルの名前を指定
          label_timestamp=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/skikkh/wai-san/issues/1/comments | jq -r '.[] | select(.body | contains("test-label")) | .created_at')
          echo label_timestamp: $label_timestamp
          label_timestamp_seconds=$(date -d "$label_timestamp" +"%s")
          echo label_timestamp_seconds: $label_timestamp_seconds
          current_time_seconds=$(date +"%s")
          time_difference=$((current_time_seconds - label_timestamp_seconds))
          if [ $time_difference -ge 1800 ]; then  # 1800秒（30分）以上経過したら削除
            echo "Label is old enough for deletion"
            echo "DELETABLE=true" >> $GITHUB_ENV
          else
            echo "Label is not old enough for deletion"
            echo "DELETABLE=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete AWS resources
        if: env.AWS_RESOURCE_DELETABLE == 'true'
        run: |
          echo "Delete AWS resources"
          # Stop pre-production ECS service
          # aws ecs update-service --cluster test --service test --desired-count 0

          # Stop RDS cluster
          # RDS_STATUS=$(aws rds describe-db-clusters --no-cli-pager --db-cluster-identifier ${RDS_CLUSTER_NAME} | jq -r '.DBClusters[] | .Status')
          
          # if [ "${RDS_STATUS}" == "available" ]; then
          #     echo "Stop ${RDS_CLUSTER_NAME}"
          #     aws rds stop-db-cluster --db-cluster-identifier ${RDS_CLUSTER_NAME}
          # fi
          
          # Delete Elasticache
          # aws elasticache describe-cache-clusters --no-cli-pager --cache-cluster-id ${ELASTICACHE_CLUSTER_ID} > /dev/null 2>&1
          
          # if [ $? -eq 0 ]; then
          #     echo "Delete ${ELASTICACHE_CLUSTER_ID}"
          #     aws elasticache delete-cache-cluster \
          #         --cache-cluster-id ${ELASTICACHE_CLUSTER_ID}
          # fi
          
        env:
          RDS_CLUSTER_NAME: pre-production-products
          ELASTICACHE_CLUSTER_ID: pre-production-products
